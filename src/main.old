use std::env;
use std::collections::HashMap;
use reqwest::blocking::multipart;
use simple_logger::SimpleLogger;

mod oauth;
mod twbot;

use oauth::client::OAuthClient;
use oauth::parameter::Parameter;

fn main() -> Result<(), Box<dyn std::error::Error + std::marker::Sync + std::marker::Send>> {
    SimpleLogger::new().with_level(log::LevelFilter::Info).env().init().unwrap();
    let app_key = match env::var("TWAPP_KEY") {
        Ok(val) => val,
        Err(e) => return Err(Box::new(e))
    };
    let app_secret = match env::var("TWAPP_SECRET") {
        Ok(val) => val,
        Err(e) => return Err(Box::new(e))
    };

    let user_token = match env::var("TWUSER_TOKEN") {
        Ok(val) => val,
        Err(e) => return Err(Box::new(e))
    };
    let user_secret = match env::var("TWUSER_SECRET") {
        Ok(val) => val,
        Err(e) => return Err(Box::new(e))
    };

    let bot = twbot::Bot::new_from_env()?;
    let file = std::fs::File::open("fox_friday.mp4")?;
    let file_len = file.metadata().as_ref().unwrap().len();
    let media = bot.upload_media(file, file_len as usize)?;

    // bot.tweet_status_with_media(String::from("testing, ignore"), vec![media])?;

    /*
    let mut form = HashMap::new();
    form.insert("status", "testing, ignore");

    let parameter_vec = vec![
        // Parameter::new("boundary".to_string(), form.boundary().to_string()),
        // Parameter::new("name".to_string(), "test".to_string()),
        Parameter::new("status".to_string(), "testing, ignore".to_string())
    ];

    let client = reqwest::blocking::Client::new();
    let request_builder = client
        .request(
            reqwest::Method::POST,
            reqwest::Url::parse("https://api.twitter.com/1.1/statuses/update.json")?)
        .form(&form);

    let mut request = request_builder.build()?;

    let o_client = OAuthClient::new(app_key, app_secret, user_token, user_secret);
    request = o_client.auth_request(request, parameter_vec)?;
    println!("{:?}", request);

    let resp = client.execute(request)?
        .text()?;

    println!("{}", resp);
    */
    /*
    /* let form = multipart::Form::new()
        .text("test", "test")
        .text("test2", "test2");
    let
    */

    let mut form = HashMap::new();
    form.insert("status", "testing, ignore");

    let mut parameter_vec = vec![
        // Parameter::new("boundary".to_string(), form.boundary().to_string()),
        // Parameter::new("name".to_string(), "test".to_string()),
        Parameter::new("status".to_string(), "testing, ignore".to_string())
    ];

    let client = reqwest::blocking::Client::new();
    let request_builder = client
        .request(
            reqwest::Method::POST,
            reqwest::Url::parse("https://api.twitter.com/1.1/statuses/update.json")?)
        .form(&form);

    let mut request = request_builder.build()?;

    let o_client = OAuthClient::new(app_key, app_secret, user_token, user_secret);
    request = o_client.auth_request(request, parameter_vec)?;
    println!("{:?}", request);

    let test_key: [u8; 20] = [0x84, 0x2B, 0x52, 0x99, 0x88, 0x7E, 0x88, 0x76, 0x02, 0x12, 0xA0, 0x56, 0xAC, 0x4E, 0xC2, 0xEE, 0x16, 0x26, 0xB5, 0x49];
    println!("{:?}", oauth::base64::bytes_to_base64(test_key.to_vec()));

    let resp = client.execute(request)?
        .text()?;

    println!("{}", resp);

    /*
    let resp = reqwest::blocking::get("https://google.com")?
        .text()?;

    println!("{:?}", resp);
    */
    */

    Ok(())
}
